{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport {Observable} from 'vendor/npm/rxjs/Observable';\n\nclass StreamHandler {\n\n  start(observer, url) {\n    this.observer = observer;\n\n    console.log('StreamHandler: start: ' + url);\n    this.source = new EventSource(url);\n    this.source.onmessage = this.onMessage.bind(this);\n    this.source.onerror = this.onError.bind(this);\n    this.source.onopen = this.onOpen.bind(this);\n    this.source.onclose = this.onClose.bind(this);\n    this.metrics = [];\n  }\n\n  onMessage(evt) {\n    var data = JSON.parse(evt.data);\n    if (data.type === 'metric-event') {\n      this.processMetricEvent(data);\n    }\n  }\n\n  onError(evt) {\n    console.log('stream error', evt);\n  }\n\n  onClose(evt) {\n    console.log('stream closed', evt);\n  }\n\n  onOpen(evt) {\n    console.log('stream opened', evt);\n  }\n\n  close() {\n    console.log('Forcing event stream close');\n    this.source.close();\n  }\n\n  processMetricEvent(event) {\n    console.log(event);\n  }\n}\n\nclass SnapDatasource {\n\n  constructor(instanceSettings, $http, backendSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.url = instanceSettings.url;\n    this.$http = $http;\n    this.backendSrv = backendSrv;\n  }\n\n  request(options) {\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTasks() {\n    return this.request({method: 'get', url: '/v1/tasks'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body.ScheduledTasks) {\n        return [];\n      }\n\n      return res.data.body.ScheduledTasks;\n    });\n  }\n\n  emptyResult() {\n    return Promise.resolve({data: []});\n  }\n\n  query(options) {\n    var target = options.targets[0];\n    if (!target || !target.task || !target.task.id) {\n      return this.emptyResult();\n    }\n\n    if (this.observable) {\n      return this.emptyResult();\n    }\n\n    var task = target.task;\n\n    var watchUrl = this.url + '/v1/tasks/' + task.id + '/watch';\n    this.observable = Observable.create(observer => {\n\n      var handler = new StreamHandler();\n      handler.start(observer, watchUrl);\n\n      return () => {\n        handler.close();\n        this.observable = null;\n      };\n    });\n\n    return Promise.resolve(this.observable);\n  }\n}\n\nexport {SnapDatasource};\n"]}