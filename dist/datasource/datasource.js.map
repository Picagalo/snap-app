{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport moment from 'moment';\nimport {StreamHandler} from './stream_handler';\n\nexport class SnapDatasource {\n\n  constructor(instanceSettings, $http, backendSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.url = instanceSettings.url;\n    this.$http = $http;\n    this.backendSrv = backendSrv;\n    this.streamHandlers = {};\n  }\n\n  request(options) {\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTasks() {\n    return this.request({method: 'get', url: '/v1/tasks'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body.ScheduledTasks) {\n        return [];\n      }\n\n      return res.data.body.ScheduledTasks;\n    });\n  }\n\n  emptyResult() {\n    return Promise.resolve({data: []});\n  }\n\n  getTask(taskId) {\n    return this.request({method: 'get', url: '/v1/tasks/' + taskId}).then(res => {\n      return res.data.body;\n    }).catch(err => {\n      if (err.status === 404) {\n        return null;\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  createTask(target) {\n    if (target.metrics.length === 0) {\n      return Promise.reject(\"No metrics selected for task\");\n    }\n\n    var task = {\n      version: 1,\n      name: target.taskName,\n      start: true,\n      schedule: {\n        type: 'simple',\n        interval: target.interval,\n      },\n      workflow: {\n        collect: {\n        }\n      },\n      publish: []\n    };\n\n    task.workflow.collect.metrics = target.metrics.reduce((memo, metric) => {\n      memo[metric.namespace] = {};\n      return memo;\n    }, {});\n\n    console.log('creating task', task);\n    return this.request({method: 'post', url: '/v1/tasks', data: task}).then(res => {\n      console.log('created task', res);\n      return res.data.body;\n    });\n  }\n\n  // getTaskId(target) {\n  //   if (!target) {\n  //     return Promise.resolve(null);\n  //   }\n  //\n  //   switch (target.mode) {\n  //     case 'Watch Task': {\n  //       if (!target.taskId) {\n  //         return Promise.resolve(null);\n  //       }\n  //\n  //       return this.getTask(target.taskId).then(task => {\n  //         return task.id;\n  //       });\n  //     }\n  //     case  'Define Task': {\n  //       if (target.taskId) {\n  //         return this.getTask(target.taskId).then(task => {\n  //           return task.id;\n  //         });\n  //       }\n  //     }\n  //   }\n  // }\n\n  query(options) {\n    var handler = this.streamHandlers[options.panelId];\n    if (handler) {\n      return Promise.resolve(handler);\n    }\n\n    this.streamHandlers[options.panelId] = handler = new StreamHandler(options, this);\n    handler.start();\n\n    return Promise.resolve(handler);\n\n    // if (this.runningQuery) {\n    //   return this.runningQuery;\n    // }\n    //\n    // var target = options.targets[0];\n    // this.runningQuery = this.getTaskId(target).then(taskId => {\n    //\n    //   if (!taskId) {\n    //     return this.emptyResult();\n    //   }\n    //\n    //   var watchUrl = this.url + '/v1/tasks/' + taskId + '/watch';\n    //   this.observable = Observable.create(observer => {\n    //\n    //     var handler = new StreamHandler();\n    //     handler.start(observer, watchUrl);\n    //\n    //     return () => {\n    //       handler.close();\n    //       this.observable = null;\n    //     };\n    //   });\n    //\n    //   return this.observable;\n    // }).finally(() => {\n    //   this.runningQuery = null;\n    // });\n    //\n    // return this.runningQuery;\n  }\n\n  getMetrics() {\n    if (this.metricsCache) {\n      return Promise.resolve(this.metricsCache);\n    }\n\n    return this.request({method: 'get', url: '/v1/metrics'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body) {\n        return [];\n      }\n\n      this.metricsCache = res.data.body.map(value => {\n        return {text: value.namespace, value: value.namespace};\n      });\n\n      return this.metricsCache;\n    });\n  }\n\n  deleteTask(taskId) {\n    return this.request({method: 'delete', url: '/v1/tasks/' + taskId});\n  }\n\n  startTask(taskId) {\n    return this.request({method: 'put', url: '/v1/tasks/' + taskId + '/start'});\n  }\n\n  stopTask(taskId) {\n    return this.request({method: 'put', url: '/v1/tasks/' + taskId + '/stop'});\n  }\n\n}\n\n"]}