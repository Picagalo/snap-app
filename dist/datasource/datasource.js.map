{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport moment from 'moment';\nimport {Observable} from 'vendor/npm/rxjs/Observable';\n\nclass StreamHandler {\n\n  start(observer, url) {\n    this.observer = observer;\n\n    console.log('StreamHandler: start: ' + url);\n    this.source = new EventSource(url);\n    this.source.onmessage = this.onMessage.bind(this);\n    this.source.onerror = this.onError.bind(this);\n    this.source.onopen = this.onOpen.bind(this);\n    this.source.onclose = this.onClose.bind(this);\n    this.metrics = {};\n  }\n\n  onMessage(evt) {\n    var data = JSON.parse(evt.data);\n    if (data.type === 'metric-event') {\n      this.processMetricEvent(data);\n    }\n  }\n\n  onError(evt) {\n    console.log('stream error', evt);\n  }\n\n  onClose(evt) {\n    console.log('stream closed', evt);\n  }\n\n  onOpen(evt) {\n    console.log('stream opened', evt);\n  }\n\n  close() {\n    console.log('Forcing event stream close');\n    this.source.close();\n  }\n\n  processMetricEvent(data) {\n    var endTime = new Date().getTime();\n    var startTime = endTime - (60 * 5 *1000)\n\n    for (var i = 0; i < data.event.length; i++) {\n      var point = data.event[i];\n      var series = this.metrics[point.namespace];\n      if (!series) {\n        series = {target: point.namespace, datapoints: []};\n        this.metrics[point.namespace] = series;\n      }\n\n      var time = new Date(point.timestamp).getTime();\n      series.datapoints.push([point.data, time]);\n    }\n\n    this.observer.next({\n      data: this.metrics,\n      range: {from: moment(startTime), to: moment(endTime)}\n    });\n  }\n}\n\nclass SnapDatasource {\n\n  constructor(instanceSettings, $http, backendSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.url = instanceSettings.url;\n    this.$http = $http;\n    this.backendSrv = backendSrv;\n  }\n\n  request(options) {\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTasks() {\n    return this.request({method: 'get', url: '/v1/tasks'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body.ScheduledTasks) {\n        return [];\n      }\n\n      return res.data.body.ScheduledTasks;\n    });\n  }\n\n  emptyResult() {\n    return Promise.resolve({data: []});\n  }\n\n  query(options) {\n    var target = options.targets[0];\n    if (!target || !target.task || !target.task.id) {\n      return this.emptyResult();\n    }\n\n    if (this.observable) {\n      return this.emptyResult();\n    }\n\n    var task = target.task;\n\n    var watchUrl = this.url + '/v1/tasks/' + task.id + '/watch';\n    this.observable = Observable.create(observer => {\n\n      var handler = new StreamHandler();\n      handler.start(observer, watchUrl);\n\n      return () => {\n        handler.close();\n        this.observable = null;\n      };\n    });\n\n    return Promise.resolve(this.observable);\n  }\n\n  getMetrics() {\n    if (this.metricsCache) {\n      return Promise.resolve(this.metricsCache);\n    }\n\n    return this.request({method: 'get', url: '/v1/metrics'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body) {\n        return [];\n      }\n\n      this.metricsCache = res.data.body.map(value => {\n        return {text: value.namespace, value: value.namespace};\n      });\n\n      return this.metricsCache;\n    });\n  }\n}\n\nexport {SnapDatasource};\n"]}